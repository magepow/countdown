/*
* @Author: Alex Dong
* @Date:   2020-07-29 13:21:07
* @Last Modified by:   Alex Dong
* @Last Modified time: 2022-05-09 15:51:23
*/

(function($) {
	"use strict";
	$.fn.countdown = function (options) {
	    var defaults = {
	        until: '',
	        layout       : '<span class="box-count day"><span class="number">0</span><span class="text">Days</span></span><span class="box-count hrs"><span class="number">0</span><span class="text">Hrs</span></span><span class="box-count min"><span class="number">0</span><span class="text">Mins</span></span><span class="box-count secs"><span class="number">0</span> <span class="text">Secs</span></span>',
	        leadingZero  : true,
	        countStepper : -1, // s: -1 // min: -60 // hour: -3600
	        timeout      : '<span class="timeout">Time out!</span>',
	    };

	    var settings = $.extend(defaults, options);
	    var until            = settings.until;
	    var layout           = settings.layout;
	    var leadingZero      = settings.leadingZero;
	    var countStepper     = settings.countStepper;
	    var setTimeOutPeriod = (Math.abs(countStepper)-1)*1000 + 990;
	    var timeout          = settings.timeout;

	    var methods = {
	        init : function() {
	            return this.each(function() {
	                var $countdown  = $(this);
	                if( $countdown.length && !$countdown.hasClass('init')){
	                    $countdown.addClass('init');
	                    methods.timerLoad($countdown);
	                }
	            });
	        },
	        
	        timerLoad: function(el){
	            var gsecs = until ? until : el.data('timer');
	            if((new Date(gsecs)).getTime() > 0){
	                var start = Date.parse(new Date());
	                var end = Date.parse(gsecs);
	                gsecs  = (end - start)/1000;    
	            }
	            if (gsecs > 0) {
	                var isLayout = el.find('.min .number');
	                if (!isLayout.length) {
	                	if(el.data('layout') != undefined){
	                		el.html(el.data('layout'));
	                	} else {
	                		el.html(layout);
	                	}
	                }
	                methods.CountBack(el, gsecs);
	            }
	        },

	        calcage: function (secs, num1, num2) {
	            var s = ((Math.floor(secs/num1)%num2)).toString();
	            if (leadingZero && s.length < 2) s = "0" + s;
	            return "<b>" + s + "</b>";
	        },

	        CountBack: function (el, secs) {
	            if (secs < 0) {
	                el.html(timeout);
	                return;
	            }
	            el.find('.day .number').html(methods.calcage(secs,86400,100000));
	            el.find('.hour .number, .hrs .number').html(methods.calcage(secs,3600,24));
	            el.find('.min .number').html(methods.calcage(secs,60,60));
	            el.find('.sec .number, .secs .number').html(methods.calcage(secs,1,60));
	            setTimeout(function(){ methods.CountBack(el, (secs+countStepper))}, setTimeOutPeriod);
	        },

	    };

	    if (methods[options]) {
	        return methods[options].apply(this, Array.prototype.slice.call(arguments, 1));
	    } else if (typeof options === 'object' || !options) {
	        return methods.init.apply(this);
	    } else {
	        $.error('Method "' + method + '" does not exist in timer plugin!');
	    }
	};

	$(function($) {
		$('.countdown').countdown();
	});

})(jQuery);
